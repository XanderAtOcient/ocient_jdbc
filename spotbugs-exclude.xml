<FindBugsFilter>
    <Match>
        <!-- Generated by Protobuf -->
        <Class name="~com.ocient.jdbc.proto.*"/>
    </Match>
    <Match>
        <Not>
        <!-- Filter out anything that is not security -->
            <Bug category="SECURITY" />
        </Not>
    </Match>
    <!--CLI is not a part of the driver.-->
    <Match>
        <Class name="com.ocient.cli.CLI" />
        <Bug pattern="SQL_INJECTION_JDBC,PATH_TRAVERSAL_IN,PATH_TRAVERSAL_OUT" />
    </Match>
    <!--Taking a file from user input is exactly what the tracing wants to do-->
    <Match>
        <Class name="com.ocient.jdbc.TraceProcessor" />
        <Bug pattern="PATH_TRAVERSAL_IN" />
    </Match>
    <!--I prefer specific filters over broad filters. The next three are
    the same type. We are taking query input from the user.-->
    <Match>
        <Class name="com.ocient.jdbc.XGPreparedStatement" />
        <Method name="execute" />
        <Bug pattern="SQL_INJECTION_JDBC" />
    </Match>
    <Match>
        <Class name="com.ocient.jdbc.XGPreparedStatement" />
        <Method name="executeUpdate" />
        <Bug pattern="SQL_INJECTION_JDBC" />
    </Match>
    <Match>
        <Class name="com.ocient.jdbc.XGPreparedStatement" />
        <Method name="executeQuery" />
        <Bug pattern="SQL_INJECTION_JDBC" />
    </Match>
    <!--Same as XGPreparedStatement. We are taking user input.-->
    <Match>
        <Class name="com.ocient.jdbc.XGStatement" />
        <Bug pattern="SQL_INJECTION_JDBC" />
    </Match>
    <!--CIPHER_INTEGRITY,PADDING_ORACLE, and STATIC_IV are associated with the old AES/CBC handshake which
    we've since replaced with AES/GCM/NoPadding. There is an unencrypted socket, 
    but that is why we provide a TLS option.-->
    <Match>
        <Class name="com.ocient.jdbc.XGConnection" />
        <Bug pattern="CIPHER_INTEGRITY,PADDING_ORACLE,STATIC_IV,UNENCRYPTED_SOCKET" />
    </Match>

</FindBugsFilter>
